
StepMotor_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090c  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000836  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e3  00000000  00000000  000013ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000456  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000118  00000000  00000000  00001b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	32 c0       	rjmp	.+100    	; 0xae <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	41 d0       	rcall	.+130    	; 0x12c <main>
  aa:	4b c0       	rjmp	.+150    	; 0x142 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_18>:
void uart_send_byte(unsigned char byte);
void turn_step_motor(uint8_t direction, uint16_t turn_cycle);

//UART 수신 인터럽트
ISR(USART0_RX_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	arduino_receive_flag = 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <arduino_receive_flag>
	arduino_receive_data = UDR0;
  c0:	8c b1       	in	r24, 0x0c	; 12
  c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <uart_init>:
}

void uart_init()
{
	 //uart 송수신 방법 결정
	 UCSR0A = 0x00;
  d2:	1b b8       	out	0x0b, r1	; 11
	 UCSR0B = 0x98;
  d4:	88 e9       	ldi	r24, 0x98	; 152
  d6:	8a b9       	out	0x0a, r24	; 10
	 UCSR0C = 0x06;
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	 

	 //Baud rate 설정
	 UBRR0H = 0x00;
  de:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	 UBRR0L = 0x67;	//103, 9600 Baud rate
  e2:	87 e6       	ldi	r24, 0x67	; 103
  e4:	89 b9       	out	0x09, r24	; 9
  e6:	08 95       	ret

000000e8 <uart_send_byte>:
}

void uart_send_byte(unsigned char byte)
{
	while(!(UCSR0A & (1<<UDRE0)));
  e8:	5d 9b       	sbis	0x0b, 5	; 11
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <uart_send_byte>
	UDR0 = byte;
  ec:	8c b9       	out	0x0c, r24	; 12
  ee:	08 95       	ret

000000f0 <turn_step_motor>:
}

//스텝 모터 돌리는 함수. 인자 : direction : 방향(TURN_RIGHT, TURN LEFT), turn_cycle : 회전 횟수
void turn_step_motor(uint8_t direction, uint16_t turn_cycle)
{
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
	int i;
	for(i = 0; i < turn_cycle; i++)
  fa:	61 15       	cp	r22, r1
  fc:	71 05       	cpc	r23, r1
  fe:	81 f0       	breq	.+32     	; 0x120 <turn_step_motor+0x30>
 100:	f8 2e       	mov	r15, r24
 102:	8b 01       	movw	r16, r22
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	d0 e0       	ldi	r29, 0x00	; 0
	{
		uart_send_byte(direction);
 108:	8f 2d       	mov	r24, r15
 10a:	ee df       	rcall	.-36     	; 0xe8 <uart_send_byte>
		while(!(arduino_receive_flag));
 10c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <arduino_receive_flag>
 110:	99 23       	and	r25, r25
 112:	e1 f3       	breq	.-8      	; 0x10c <turn_step_motor+0x1c>
		arduino_receive_flag = 0;
 114:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <arduino_receive_flag>

//스텝 모터 돌리는 함수. 인자 : direction : 방향(TURN_RIGHT, TURN LEFT), turn_cycle : 회전 횟수
void turn_step_motor(uint8_t direction, uint16_t turn_cycle)
{
	int i;
	for(i = 0; i < turn_cycle; i++)
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	c0 17       	cp	r28, r16
 11c:	d1 07       	cpc	r29, r17
 11e:	a1 f7       	brne	.-24     	; 0x108 <turn_step_motor+0x18>
	{
		uart_send_byte(direction);
		while(!(arduino_receive_flag));
		arduino_receive_flag = 0;
	}
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	ff 90       	pop	r15
 12a:	08 95       	ret

0000012c <main>:
	arduino_receive_data = UDR0;
}

int main(void)
{
	cli();
 12c:	f8 94       	cli
   uart_init();
 12e:	d1 df       	rcall	.-94     	; 0xd2 <uart_init>
   DDRD = 0x00;		// 디버깅용
 130:	11 ba       	out	0x11, r1	; 17
	sei();
 132:	78 94       	sei
	
	turn_step_motor(TURN_RIGHT, 8);
 134:	68 e0       	ldi	r22, 0x08	; 8
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	81 e3       	ldi	r24, 0x31	; 49
 13a:	da df       	rcall	.-76     	; 0xf0 <turn_step_motor>
	PORTD = 0xFF;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	82 bb       	out	0x12, r24	; 18
	while(1);
 140:	ff cf       	rjmp	.-2      	; 0x140 <main+0x14>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
